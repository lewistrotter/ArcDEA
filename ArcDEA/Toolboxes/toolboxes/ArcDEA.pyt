# -*- coding: utf-8 -*-import osimport datetimeimport jsonimport requestsimport numpy as npimport xarray as xrimport arcpyclass Toolbox(object):    def __init__(self):        self.label = 'ArcDEA'        self.alias = 'ArcDEA'        self.tools = [            FetchLandsatBaselineData,            FetchSentinel2BaselineData,            FetchLandsatGeomedData,            CalculateIndices,            RemoveOutliers,            ResampleData,            GroupData,            ConvertNetCDFToRasters,            ConvertNetCDFToCloudRaster,            Testing            ]class FetchLandsatBaselineData(object):    def __init__(self):        self.label = 'Fetch Landsat (Baseline)'        self.description = 'Obtains DEA Landsat Surface Reflectance Collection 3 data.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Region of Interest',                              name='in_extent',                              datatype='GPExtent',                              parameterType='Required',                              direction='Input')        p00.controlCLSID = '{15F0D1C1-F783-49BC-8D16-619B8E92F668}'        params.append(p00)        p01 = arcpy.Parameter(displayName='Output NetCDF',                              name='out_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Output')        p01.filter.list = ['nc']        params.append(p01)        p02 = arcpy.Parameter(displayName='Start Date',                              name='in_start_date',                              datatype='GPDate',                              parameterType='Required',                              direction='Input')        p02.value = '2020-01-01'        params.append(p02)        p03 = arcpy.Parameter(displayName='End Date',                              name='in_end_date',                              datatype='GPDate',                              parameterType='Required',                              direction='Input')        p03.value = datetime.date.today().strftime('%Y-%m-%d')        params.append(p03)        p04 = arcpy.Parameter(displayName='Collections',                              name='in_collections',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True)        p04.filter.type = 'ValueList'        p04.filter.list = self._get_collections()        p04.value = self._get_collections()        params.append(p04)        p05 = arcpy.Parameter(displayName='Band Assets',                              name='in_assets',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True)        p05.filter.type = 'ValueList'        p05.filter.list = self._get_assets()        p05.value = self._get_assets()        params.append(p05)        p06 = arcpy.Parameter(displayName='Quality Mask Flags',                              name='in_quality_flags',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True,                              category='Quality')        p06.filter.type = 'ValueList'        p06.filter.list = self._get_mask_flags()        p06.value = ['Valid', 'Snow', 'Shadow', 'Water']        params.append(p06)        p07 = arcpy.Parameter(displayName='Remove SLC-off Data',                              name='in_remove_slc_off',                              datatype='GPBoolean',                              parameterType='Required',                              direction='Input',                              category='Quality')        p07.value = True        params.append(p07)        p08 = arcpy.Parameter(displayName='Remove Mask Band',                              name='in_remove_mask',                              datatype='GPBoolean',                              parameterType='Required',                              direction='Input',                              category='Quality')        p08.value = True        params.append(p08)        p09 = arcpy.Parameter(displayName='Max. Percent Empty Pixels',                              name='in_max_empty',                              datatype='GPLong',                              parameterType='Required',                              direction='Input',                              category='Quality')        p09.controlCLSID = '{C8C46E43-3D27-4485-9B38-A49F3AC588D9}'        p09.filter.type = 'Range'        p09.filter.list = [0, 100]        p09.value = 10        params.append(p09)        p10 = arcpy.Parameter(displayName='Max. Percent Invalid Pixels',                              name='in_max_invalid',                              datatype='GPLong',                              parameterType='Required',                              direction='Input',                              category='Quality')        p10.controlCLSID = '{C8C46E43-3D27-4485-9B38-A49F3AC588D9}'        p10.filter.type = 'Range'        p10.filter.list = [0, 100]        p10.value = 5        params.append(p10)        p11 = arcpy.Parameter(displayName='NoData Value',                              name='in_nodata_value',                              datatype='GPLong',                              parameterType='Optional',                              direction='Input',                              category='Quality')        p11.value = -999        params.append(p11)        p12 = arcpy.Parameter(displayName='Spatial Reference System',                              name='in_srs',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              category='Resampling')        p12.filter.type = 'ValueList'        p12.filter.list = self._get_srefs()        p12.value = 'GDA94 Australia Albers (EPSG: 3577)'        params.append(p12)        p13 = arcpy.Parameter(displayName='Spatial Resolution',                              name='in_res',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Resampling')        p13.value = 30        params.append(p13)        p14 = arcpy.Parameter(displayName='Max. Simultaneous Downloads',                              name='in_max_threads',                              datatype='GPLong',                              parameterType='Optional',                              direction='Input',                              category='Other Options')        p14.filter.type = 'Range'        p14.filter.list = [1, 999]        p14.value = None        params.append(p14)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import fetch_landsat_baseline        fetch_landsat_baseline.execute(parameters)        return    def postExecute(self, parameters):        return            def _get_collections(self):        collections = [            'Landsat 5 TM',            'Landsat 7 ETM+',            'Landsat 8 OLI',            'Landsat 9 OLI-2'            ]        return collections            def _get_assets(self):        assets = [            'Blue',            'Green',            'Red',            'NIR',            'SWIR 1',            'SWIR 2'            ]        return assets    def _get_mask_flags(self):        flags = [            'Valid',            'Cloud',            'Shadow',            'Snow',            'Water'            ]        return flags    def _get_srefs(self):        srs = [            'GDA94 Australia Albers (EPSG: 3577)',            'WGS84 Pseudo-Mercator (EPSG: 3857)',            'WGS84 (EPSG: 4326)'            ]        return srsclass FetchSentinel2BaselineData(object):    def __init__(self):        self.label = 'Fetch Sentinel 2 (Baseline)'        self.description = 'Obtains DEA Sentinel-2 Surface Reflectance Collection 3 data.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Region of Interest',                              name='in_extent',                              datatype='GPExtent',                              parameterType='Required',                              direction='Input')        p00.controlCLSID = '{15F0D1C1-F783-49BC-8D16-619B8E92F668}'        params.append(p00)        p01 = arcpy.Parameter(displayName='Output NetCDF',                              name='out_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Output')        p01.filter.list = ['nc']        params.append(p01)        p02 = arcpy.Parameter(displayName='Start Date',                              name='in_start_date',                              datatype='GPDate',                              parameterType='Required',                              direction='Input')        p02.value = '2020-01-01'        params.append(p02)        p03 = arcpy.Parameter(displayName='End Date',                              name='in_end_date',                              datatype='GPDate',                              parameterType='Required',                              direction='Input')        p03.value = datetime.date.today().strftime('%Y-%m-%d')        params.append(p03)        p04 = arcpy.Parameter(displayName='Collections',                              name='in_collections',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True)        p04.filter.type = 'ValueList'        p04.filter.list = self._get_collections()        p04.value = self._get_collections()        params.append(p04)        p05 = arcpy.Parameter(displayName='Band Assets',                              name='in_assets',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True)        p05.filter.type = 'ValueList'        p05.filter.list = self._get_assets()        p05.value = self._get_assets()        params.append(p05)        p06 = arcpy.Parameter(displayName='Quality Mask Algorithm',                              name='in_mask_algorithm',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              category='Quality')        p06.filter.type = 'ValueList'        p06.filter.list = ['fMask', 'S2Cloudless']        p06.value = 'fMask'        params.append(p06)        p07 = arcpy.Parameter(displayName='Quality Mask Flags',                              name='in_quality_flags',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True,                              category='Quality')        p07.filter.type = 'ValueList'        p07.filter.list = self._get_mask_flags()        p07.value = ['Valid', 'Snow', 'Shadow', 'Water']        params.append(p07)        p08 = arcpy.Parameter(displayName='Remove Mask Band',                              name='in_remove_mask',                              datatype='GPBoolean',                              parameterType='Required',                              direction='Input',                              category='Quality')        p08.value = True        params.append(p08)        p09 = arcpy.Parameter(displayName='Max. Percent Empty Pixels',                              name='in_max_empty',                              datatype='GPLong',                              parameterType='Required',                              direction='Input',                              category='Quality')        p09.controlCLSID = '{C8C46E43-3D27-4485-9B38-A49F3AC588D9}'        p09.filter.type = 'Range'        p09.filter.list = [0, 100]        p09.value = 10        params.append(p09)        p10 = arcpy.Parameter(displayName='Max. Percent Invalid Pixels',                              name='in_max_invalid',                              datatype='GPLong',                              parameterType='Required',                              direction='Input',                              category='Quality')        p10.controlCLSID = '{C8C46E43-3D27-4485-9B38-A49F3AC588D9}'        p10.filter.type = 'Range'        p10.filter.list = [0, 100]        p10.value = 5        params.append(p10)        p11 = arcpy.Parameter(displayName='NoData Value',                              name='in_nodata_value',                              datatype='GPLong',                              parameterType='Optional',                              direction='Input',                              category='Quality')        p11.value = -999        params.append(p11)        p12 = arcpy.Parameter(displayName='Spatial Reference System',                              name='in_srs',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              category='Resampling')        p12.filter.type = 'ValueList'        p12.filter.list = self._get_srefs()        p12.value = 'GDA94 Australia Albers (EPSG: 3577)'        params.append(p12)        p13 = arcpy.Parameter(displayName='Spatial Resolution',                              name='in_res',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Resampling')        p13.value = 10        params.append(p13)        p14 = arcpy.Parameter(displayName='Max. Simultaneous Downloads',                              name='in_max_threads',                              datatype='GPLong',                              parameterType='Optional',                              direction='Input',                              category='Other Options')        p14.filter.type = 'Range'        p14.filter.list = [1, 999]        p14.value = None        params.append(p14)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        if not parameters[6].hasBeenValidated:            if parameters[6].value == 'fMask':                parameters[7].enabled = True                parameters[7].filter.list = self._get_mask_flags()                parameters[7].value = ['Valid', 'Snow', 'Shadow', 'Water']            else:                parameters[7].enabled = False                parameters[7].filter.list = ['Valid']  # only has one class                parameters[7].value = ['Valid']        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import fetch_sentinel2_baseline        fetch_sentinel2_baseline.execute(parameters)        return    def postExecute(self, parameters):        return    def _get_collections(self):        collections = [            'Sentinel 2A',            'Sentinel 2B'            ]        return collections    def _get_assets(self):        assets = [            'Blue',            'Green',            'Red',            'Red Edge 1',            'Red Edge 2',            'Red Edge 3',            'NIR 1',            'NIR 2',            'SWIR 2',            'SWIR 3'            ]        return assets    def _get_mask_flags(self):        flags = [            'Valid',            'Cloud',            'Shadow',            'Snow',            'Water'            ]        return flags    def _get_srefs(self):        srs = [            'GDA94 Australia Albers (EPSG: 3577)',            'WGS84 Pseudo-Mercator (EPSG: 3857)',            'WGS84 (EPSG: 4326)'            ]        return srsclass FetchLandsatGeomedData(object):    def __init__(self):        self.label = 'Fetch Landsat (GeoMAD)'        self.description = 'Obtains DEA Landsat Surface Reflectance Collection 3 GeoMAD data.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Region of Interest',                              name='in_extent',                              datatype='GPExtent',                              parameterType='Required',                              direction='Input')        p00.controlCLSID = '{15F0D1C1-F783-49BC-8D16-619B8E92F668}'        params.append(p00)        p01 = arcpy.Parameter(displayName='Output NetCDF',                              name='out_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Output')        p01.filter.list = ['nc']        params.append(p01)        p02 = arcpy.Parameter(displayName='Start Year',                              name='in_start_year',                              datatype='GPLong',                              parameterType='Required',                              direction='Input')        p02.value = 2020        params.append(p02)        p03 = arcpy.Parameter(displayName='End Year',                              name='in_end_year',                              datatype='GPLong',                              parameterType='Required',                              direction='Input')        p03.value = int(datetime.date.today().strftime('%Y'))        params.append(p03)        p04 = arcpy.Parameter(displayName='Collections',                              name='in_collections',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True)        p04.filter.type = 'ValueList'        p04.filter.list = self._get_collections()        p04.value = self._get_collections()        params.append(p04)        p05 = arcpy.Parameter(displayName='Band Assets',                              name='in_assets',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True)        p05.filter.type = 'ValueList'        p05.filter.list = self._get_assets()        p05.value = self._get_assets()[0:6]  # exclude stats bands        params.append(p05)        p06 = arcpy.Parameter(displayName='Remove SLC-off Data',                              name='in_remove_slc_off',                              datatype='GPBoolean',                              parameterType='Required',                              direction='Input',                              category='Quality')        p06.value = True        params.append(p06)        p07 = arcpy.Parameter(displayName='Spatial Reference System',                              name='in_srs',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              category='Resampling')        p07.filter.type = 'ValueList'        p07.filter.list = self._get_srefs()        p07.value = 'GDA94 Australia Albers (EPSG: 3577)'        params.append(p07)        p08 = arcpy.Parameter(displayName='Spatial Resolution',                              name='in_res',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Resampling')        p08.value = 30        params.append(p08)        p09 = arcpy.Parameter(displayName='Max. Simultaneous Downloads',                              name='in_max_threads',                              datatype='GPLong',                              parameterType='Optional',                              direction='Input',                              category='Other Options')        p09.filter.type = 'Range'        p09.filter.list = [1, 999]        p09.value = None        params.append(p09)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import fetch_landsat_geomed        fetch_landsat_geomed.execute(parameters)        return    def postExecute(self, parameters):        return    def _get_collections(self):        collections = [            'Landsat 5 TM',            'Landsat 7 ETM+',            'Landsat 8 & 9 OLI'            ]        return collections    def _get_assets(self):        assets = [            'Blue',            'Green',            'Red',            'NIR',            'SWIR 1',            'SWIR 2',            'EMAD',            'SMAD',            'BCMAD',            'Count'            ]        return assets    def _get_srefs(self):        srs = [            'GDA94 Australia Albers (EPSG: 3577)',            'WGS84 Pseudo-Mercator (EPSG: 3857)',            'WGS84 (EPSG: 4326)'            ]        return srsclass CalculateIndices(object):    def __init__(self):        self.label = 'Spectral Indices'        self.description = 'Generate spectral indices from downloaded DEA data.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Input NetCDF',                              name='in_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['nc']        params.append(p00)        p01 = arcpy.Parameter(displayName='Output NetCDF',                              name='out_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Output')        p01.filter.list = ['nc']        params.append(p01)        p02 = arcpy.Parameter(displayName='Index Type',                              name='in_index_type',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p02.filter.type = 'ValueList'        p02.filter.list = self._get_index_types()        p02.value = 'Vegetation'        params.append(p02)        p03 = arcpy.Parameter(displayName='Index Name',                              name='in_index_name',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p03.filter.type = 'ValueList'        p03.filter.list = self._get_vegetation_indices()        p03.value = 'NDVI: Normalised Difference Vegetation Index'        params.append(p03)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        if not parameters[2].hasBeenValidated:            indices = []            if parameters[2].value == 'Vegetation':                indices = self._get_vegetation_indices()            elif parameters[2].value == 'Water':                indices = self._get_water_indices()            elif parameters[2].value == 'Fire':                indices = self._get_fire_indices()            elif parameters[2].value == 'Urban':                indices = self._get_urban_indices()            elif parameters[2].value == 'Mineral':                indices = self._get_mineral_indices()            parameters[3].filter.list = indices            parameters[3].value = indices[0]        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import calculate_indices        calculate_indices.execute(parameters)        return    def postExecute(self, parameters):        return    def _get_index_types(self):        types = [            'Vegetation',            'Water',            'Fire',            'Urban',            'Mineral'            ]        return types    def _get_vegetation_indices(self):        indices = [            'NDVI: Normalised Difference Vegetation Index',            'EVI: Enhanced Vegetation Index',            'LAI: Leaf Area Index',            'MAVI: Moisture Adjusted Vegetation Index',            'MSAVI: Mod. Soil Adjusted Vegetation Index',            'NDCI: Normalised Difference Chlorophyll Index',            'kNDVI: Non-linear Difference Vegetation Index'            ]        return indices    def _get_water_indices(self):        indices = [            'NDMI: Normalised Difference Moisture Index',            'NDWI: Normalised Difference Water Index',            'MNDWI: Mod. Normalised Difference Water Index',            'WI: Water Index'            ]        return indices    def _get_fire_indices(self):        indices = [            'BAI: Burn Area Index',            'NBR: Normalised Burn Ratio'            ]        return indices    def _get_urban_indices(self):        indices = [            'NDBI: Normalised Difference Built-Up Index',            'BUI: Built-Up Index',            'BAEI: Built-Up Area Extraction Index',            'NBI: New Built-Up Index',            'BSI: Bare Soil Index'            ]        return indices    def _get_mineral_indices(self):        indices = [            'CMR: Clay Minerals Ratio',            'FMR: Ferrous Minerals Ratio',            'IOR: Iron Ore Ratio'            ]        return indicesclass RemoveOutliers(object):    def __init__(self):        self.label = 'Remove Outliers'        self.description = 'Remove outliers from a NetCDF.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Input NetCDF',                              name='in_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['nc']        params.append(p00)        p01 = arcpy.Parameter(displayName='Output NetCDF',                              name='out_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Output')        p01.filter.list = ['nc']        params.append(p01)        p02 = arcpy.Parameter(displayName='Spike Cutoff',                              name='in_spike_cutoff',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input')        p02.filter.type = 'Range'        p02.filter.list = [0.001, 999.999]        p02.value = 2.0        params.append(p02)        p03 = arcpy.Parameter(displayName='Interpolate NoData',                              name='in_interpolate',                              datatype='GPBoolean',                              parameterType='Required',                              direction='Input')        p03.value = True        params.append(p03)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import remove_outliers        remove_outliers.execute(parameters)        return    def postExecute(self, parameters):        returnclass ResampleData(object):    def __init__(self):        self.label = 'Resample Data'        self.description = 'Temporally resample a NetCDF.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Input NetCDF',                              name='in_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['nc']        params.append(p00)        p01 = arcpy.Parameter(displayName='Output NetCDF',                              name='out_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Output')        p01.filter.list = ['nc']        params.append(p01)        p02 = arcpy.Parameter(displayName='New Temporal Frequency',                              name='in_frequency',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p02.filter.type = 'ValueList'        p02.filter.list = get_param_resample_frequencies()        p02.value = 'Monthly (Start)'        params.append(p02)        p03 = arcpy.Parameter(displayName='Aggregation Method',                              name='in_aggregator',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p03.filter.type = 'ValueList'        p03.filter.list = get_param_resample_aggregators()        p03.value = 'Mean'        params.append(p03)        p04 = arcpy.Parameter(displayName='Interpolate NoData',                              name='in_interpolate',                              datatype='GPBoolean',                              parameterType='Required',                              direction='Input')        p04.value = True        params.append(p04)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import resample_data        resample_data.execute(parameters)        return    def postExecute(self, parameters):        returnclass GroupData(object):    def __init__(self):        self.label = 'Group Data'        self.description = 'Temporally group a NetCDF.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Input NetCDF',                              name='in_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['nc']        params.append(p00)        p01 = arcpy.Parameter(displayName='Output NetCDF',                              name='out_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Output')        p01.filter.list = ['nc']        params.append(p01)        p02 = arcpy.Parameter(displayName='New Temporal Group',                              name='in_group',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p02.filter.type = 'ValueList'        p02.filter.list = get_param_group_groups()        p02.value = 'Month'        params.append(p02)        p03 = arcpy.Parameter(displayName='Aggregation Method',                              name='in_aggregator',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p03.filter.type = 'ValueList'        p03.filter.list = get_param_group_aggregators()        p03.value = 'Mean'        params.append(p03)        p04 = arcpy.Parameter(displayName='Interpolate NoData',                              name='in_interpolate',                              datatype='GPBoolean',                              parameterType='Required',                              direction='Input')        p04.value = True        params.append(p04)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import group_data        group_data.execute(parameters)        return    def postExecute(self, parameters):        returnclass ConvertNetCDFToRasters(object):    def __init__(self):        self.label = 'Convert NetCDF to Rasters'        self.description = 'Converts a downloaded NetCDF into a folder of rasters.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Input NetCDF',                              name='in_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['nc']        params.append(p00)        p01 = arcpy.Parameter(displayName='Output Folder',                              name='out_folder',                              datatype='DEFolder',                              parameterType='Required',                              direction='Input')        params.append(p01)        p02 = arcpy.Parameter(displayName='Output Format',                              name='in_extension',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p02.filter.type = 'ValueList'        p02.filter.list = self._get_file_extensions()        p02.value = 'TIFF'        params.append(p02)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import convert_nc_to_rasters        convert_nc_to_rasters.execute(parameters)        return    def postExecute(self, parameters):        return    def _get_file_extensions(self):        extensions = [            'BMP',            'IMG',            'JP2',            'JPG',            'PNG',            'TIFF'            ]        return extensionsclass ConvertNetCDFToCloudRaster(object):    def __init__(self):        self.label = 'Convert NetCDF to Cloud Raster'        self.description = ''        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Input NetCDF',                              name='in_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['nc']        params.append(p00)        p01 = arcpy.Parameter(displayName='Output Cloud Raster',                              name='out_crf',                              datatype='DEFile',                              parameterType='Required',                              direction='Output')        p01.filter.list = ['crf']        params.append(p01)#         p02 = arcpy.Parameter(displayName='New Time-Series Frequency',#                               name='in_frequency',#                               datatype='GPString',#                               parameterType='Required',#                               direction='Input')#         p02.filter.type = 'ValueList'#         p02.filter.list = get_param_resample_frequencies()#         p02.value = 'Monthly Ends'#         params.append(p02)##         p04 = arcpy.Parameter(displayName='Interpolate NoData',#                               name='in_interpolate',#                               datatype='GPBoolean',#                               parameterType='Required',#                               direction='Input')#         p04.value = True#         params.append(p04)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import convert_nc_to_crf        convert_nc_to_crf.execute(parameters)        return    def postExecute(self, parameters):        returnclass Testing(object):    def __init__(self):        self.label = 'Testing'        self.description = ''        self.canRunInBackground = False    def getParameterInfo(self):        params = []        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import testing        testing.execute(parameters)        return    def postExecute(self, parameters):        returndef get_param_resample_frequencies():    frequencies = [        'Daily',        'Weekly',        'Monthly (Start)',        'Monthly (End)',        'Semi-Monthly (Start)',        'Semi-Monthly (End)',        'Quarterly (Start)',        'Quarterly (End)',        'Yearly (Start)',        'Yearly (End)'        ]    return frequenciesdef get_param_resample_aggregators():    aggregators = [        'Minimum',        'Maximum',        'Mean',        'Median',        'Sum',        'Standard Deviation'        ]    return aggregatorsdef get_param_group_groups():    groups = [        #'Day',        #'Day of Week',        #'Day of Year',        #'Week',        #'Week of Year',        'Month',        'Quarter',        'Season',        'Year'        ]    return groupsdef get_param_group_aggregators():    aggregators = [        'Minimum',        'Maximum',        'Mean',        'Median',        'Sum',        'Standard Deviation'        ]    return aggregators