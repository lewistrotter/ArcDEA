# -*- coding: utf-8 -*-import osimport datetimeimport jsonimport requestsimport numpy as npimport xarray as xrimport arcpyclass Toolbox(object):    def __init__(self):        self.label = 'ArcDEA'        self.alias = 'ArcDEA'        self.tools = [            FetchLandsatBaselineData,            FetchSentinel2BaselineData,            FetchLandsatGeomedData,            CalculateIndices,            RemoveOutliers,            ResampleData,            GroupData,            ConvertNetCDFToRasters,            ConvertNetCDFToCloudRaster            ]class FetchLandsatBaselineData(object):    def __init__(self):        self.label = 'Fetch Landsat Baseline Data'        self.description = ''        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Input Extent',                              name='in_extent',                              datatype='GPFeatureLayer',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['Polygon']        params.append(p00)        #p00 = arcpy.Parameter(displayName='Input Extent',                              #name='in_extent',                              #datatype='GPFeatureRecordSetLayer',                              #parameterType='Required',                              #direction='Input')        #p00.filter.list = ['Polygon']        # Use __file__ attribute to find the .lyr file (assuming the        #  .pyt and .lyr files exist in the same folder)        # param0.value = os.path.join(os.path.dirname(__file__), #'Fire_Station.lyrx')        #p00.value = r'C:\Users\Lewis\Desktop\symbol\ArcDEA Query Extent.lyrx'        #p00.symbology = r'C:\Users\Lewis\Desktop\symbol\ArcDEA Query Extent.lyrx'        #params.append(p00)        p01 = arcpy.Parameter(displayName='Output NetCDF',                              name='out_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Output')        p01.filter.list = ['nc']        params.append(p01)        p02 = arcpy.Parameter(displayName='Start Date',                              name='in_start_date',                              datatype='GPDate',                              parameterType='Required',                              direction='Input')        p02.value = '2013-01-01'        params.append(p02)        p03 = arcpy.Parameter(displayName='End Date',                              name='in_end_date',                              datatype='GPDate',                              parameterType='Required',                              direction='Input')        p03.value = datetime.date.today().strftime('%Y-%m-%d')        params.append(p03)        p04 = arcpy.Parameter(displayName='Collections',                              name='in_collections',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True)        p04.filter.type = 'ValueList'        p04.filter.list = get_param_baseline_landsat_collection_list()        p04.value = get_param_baseline_landsat_collection_list()        params.append(p04)        p05 = arcpy.Parameter(displayName='Band Assets',                              name='in_band_assets',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True)        p05.filter.type = 'ValueList'        p05.filter.list = get_param_baseline_landsat_asset_band_list()        p05.value = get_param_baseline_landsat_asset_band_list()        params.append(p05)        p06 = arcpy.Parameter(displayName='Include SLC-off Data',                              name='in_include_slc_off_data',                              datatype='GPBoolean',                              parameterType='Required',                              direction='Input',                              category='Quality')        p06.value = False        params.append(p06)        p07 = arcpy.Parameter(displayName='Quality Mask Flags',                              name='in_quality_flags',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True,                              category='Quality')        p07.filter.type = 'ValueList'        p07.filter.list = get_param_fmask_quality_flags()        p07.value = ['Valid', 'Snow', 'Shadow', 'Water']        params.append(p07)        p08 = arcpy.Parameter(displayName='Maximum Percent Out of Bounds',                              name='in_max_out_of_bounds',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Quality')        p08.filter.type = 'Range'        p08.filter.list = [0, 100]        p08.value = 10        params.append(p08)        p09 = arcpy.Parameter(displayName='Maximum Percent Invalid Pixels',                              name='in_max_invalid_pixels',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Quality')        p09.filter.type = 'Range'        p09.filter.list = [0, 100]        p09.value = 5        params.append(p09)        p10 = arcpy.Parameter(displayName='NoData Value',                              name='in_nodata_value',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Quality')        p10.value = -999        params.append(p10)        p11 = arcpy.Parameter(displayName='Spatial Reference System',                              name='in_srs',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              category='Resampling')        p11.filter.type = 'ValueList'        p11.filter.list = get_param_landsat_srs_list()        p11.value = 'GDA94 Australia Albers (EPSG: 3577)'        params.append(p11)        p12 = arcpy.Parameter(displayName='Spatial Resolution',                              name='in_res',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Resampling')        p12.value = 30        params.append(p12)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import fetch_landsat_baseline        fetch_landsat_baseline.execute(parameters)        return    def postExecute(self, parameters):        returnclass FetchSentinel2BaselineData(object):    def __init__(self):        self.label = 'Fetch Sentinel 2 Baseline Data'        self.description = ''        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Input Extent',                              name='in_extent',                              datatype='GPFeatureLayer',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['Polygon']        params.append(p00)        p01 = arcpy.Parameter(displayName='Output NetCDF',                              name='out_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Output')        p01.filter.list = ['nc']        params.append(p01)        p02 = arcpy.Parameter(displayName='Start Date',                              name='in_start_date',                              datatype='GPDate',                              parameterType='Required',                              direction='Input')        p02.value = '2018-01-01'        params.append(p02)        p03 = arcpy.Parameter(displayName='End Date',                              name='in_end_date',                              datatype='GPDate',                              parameterType='Required',                              direction='Input')        p03.value = datetime.date.today().strftime('%Y-%m-%d')        params.append(p03)        p04 = arcpy.Parameter(displayName='Collections',                              name='in_collections',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True)        p04.filter.type = 'ValueList'        p04.filter.list = get_param_baseline_sentinel2_collection_list()        p04.value = get_param_baseline_sentinel2_collection_list()        params.append(p04)        p05 = arcpy.Parameter(displayName='Band Assets',                              name='in_band_assets',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True)        p05.filter.type = 'ValueList'        p05.filter.list = get_param_baseline_sentinel2_asset_band_list()        p05.value = get_param_baseline_sentinel2_asset_band_list()        params.append(p05)        p06 = arcpy.Parameter(displayName='Quality Mask Algorithm',                              name='in_quality_mask_algorithm',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              category='Quality')        p06.filter.type = 'ValueList'        p06.filter.list = ['fMask', 'S2Cloudless']        p06.value = 'fMask'        params.append(p06)        p07 = arcpy.Parameter(displayName='Quality Mask Flags',                              name='in_quality_flags',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True,                              category='Quality')        p07.filter.type = 'ValueList'        p07.filter.list = get_param_fmask_quality_flags()        p07.value = ['Valid', 'Snow', 'Shadow', 'Water']        params.append(p07)        p08 = arcpy.Parameter(displayName='Maximum Percent Out of Bounds',                              name='in_max_out_of_bounds',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Quality')        p08.filter.type = 'Range'        p08.filter.list = [0, 100]        p08.value = 10        params.append(p08)        p09 = arcpy.Parameter(displayName='Maximum Percent Invalid Pixels',                              name='in_max_invalid_pixels',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Quality')        p09.filter.type = 'Range'        p09.filter.list = [0, 100]        p09.value = 5        params.append(p09)        p10 = arcpy.Parameter(displayName='NoData Value',                              name='in_nodata_value',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Quality')        p10.value = -999        params.append(p10)        p11 = arcpy.Parameter(displayName='Spatial Reference System',                              name='in_srs',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              category='Resampling')        p11.filter.type = 'ValueList'        p11.filter.list = get_param_sentinel2_srs_list()        p11.value = 'GDA94 Australia Albers (EPSG: 3577)'        params.append(p11)        p12 = arcpy.Parameter(displayName='Spatial Resolution',                              name='in_res',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Resampling')        p12.value = 10        params.append(p12)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import fetch_sentinel2_baseline        fetch_sentinel2_baseline.execute(parameters)        return    def postExecute(self, parameters):        returnclass FetchLandsatGeomedData(object):    def __init__(self):        self.label = 'Fetch Landsat Geomedian Data'        self.description = ''        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Input Extent',                              name='in_extent',                              datatype='GPFeatureLayer',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['Polygon']        params.append(p00)        p01 = arcpy.Parameter(displayName='Output NetCDF',                              name='out_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Output')        p01.filter.list = ['nc']        params.append(p01)        p02 = arcpy.Parameter(displayName='Start Year',                              name='in_start_year',                              datatype='GPLong',                              parameterType='Required',                              direction='Input')        p02.value = 2013        params.append(p02)        p03 = arcpy.Parameter(displayName='End Year',                              name='in_end_year',                              datatype='GPLong',                              parameterType='Required',                              direction='Input')        p03.value = int(datetime.date.today().strftime('%Y'))        params.append(p03)        p04 = arcpy.Parameter(displayName='Collections',                              name='in_collections',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True)        p04.filter.type = 'ValueList'        p04.filter.list = get_param_geomed_landsat_collection_list()        p04.value = get_param_geomed_landsat_collection_list()        params.append(p04)        p05 = arcpy.Parameter(displayName='Band Assets',                              name='in_band_assets',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True)        p05.filter.type = 'ValueList'        p05.filter.list = get_param_geomed_landsat_asset_band_list()        p05.value = get_param_geomed_landsat_asset_band_list()        params.append(p05)        p06 = arcpy.Parameter(displayName='Include SLC-off Data',                              name='in_include_slc_off_data',                              datatype='GPBoolean',                              parameterType='Required',                              direction='Input',                              category='Quality')        p06.value = False        params.append(p06)        p07 = arcpy.Parameter(displayName='NoData Value',                              name='in_nodata_value',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Quality')        p07.value = -999        params.append(p07)        p08 = arcpy.Parameter(displayName='Spatial Reference System',                              name='in_srs',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              category='Resampling')        p08.filter.type = 'ValueList'        p08.filter.list = get_param_landsat_srs_list()        p08.value = 'GDA94 Australia Albers (EPSG: 3577)'        params.append(p08)        p09 = arcpy.Parameter(displayName='Spatial Resolution',                              name='in_res',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Resampling')        p09.value = 30        params.append(p09)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import fetch_landsat_geomed        fetch_landsat_geomed.execute(parameters)        return    def postExecute(self, parameters):        returnclass CalculateIndices(object):    def __init__(self):        self.label = 'Calculate Indices'        self.description = ''        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Input NetCDF',                              name='in_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['nc']        params.append(p00)        p01 = arcpy.Parameter(displayName='Output NetCDF',                              name='out_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Output')        p01.filter.list = ['nc']        params.append(p01)        p02 = arcpy.Parameter(displayName='Index Type',                              name='in_type',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p02.filter.type = 'ValueList'        p02.filter.list = get_param_indices_types()        p02.value = 'Vegetation'        params.append(p02)        p03 = arcpy.Parameter(displayName='Index',                              name='in_index',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p03.filter.type = 'ValueList'        p03.filter.list = get_param_indices_vegetation()        p03.value = 'NDVI: Normalised Difference Vegetation Index'        params.append(p03)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        if not parameters[2].hasBeenValidated:            if parameters[2].value == 'Vegetation':                parameters[3].filter.list = get_param_indices_vegetation()                parameters[3].value = get_param_indices_vegetation()[0]            elif parameters[2].value == 'Water':                parameters[3].filter.list = get_param_indices_water()                parameters[3].value = get_param_indices_water()[0]            elif parameters[2].value == 'Fire':                parameters[3].filter.list = get_param_indices_fire()                parameters[3].value = get_param_indices_fire()[0]            elif parameters[2].value == 'Urban':                parameters[3].filter.list = get_param_indices_urban()                parameters[3].value = get_param_indices_urban()[0]            elif parameters[2].value == 'Minerals':                parameters[3].filter.list = get_param_indices_minerals()                parameters[3].value = get_param_indices_minerals()[0]        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import calculate_indices        calculate_indices.execute(parameters)        return    def postExecute(self, parameters):        returnclass RemoveOutliers(object):    def __init__(self):        self.label = 'Remove Outliers'        self.description = 'Remove outliers from a NetCDF.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Input NetCDF',                              name='in_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['nc']        params.append(p00)        p01 = arcpy.Parameter(displayName='Output NetCDF',                              name='out_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Output')        p01.filter.list = ['nc']        params.append(p01)        p02 = arcpy.Parameter(displayName='Spike Cutoff',                              name='in_spike_cutoff',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input')        p02.filter.type = 'Range'        p02.filter.list = [0.001, 999.999]        p02.value = 2.0        params.append(p02)        p03 = arcpy.Parameter(displayName='Interpolate NoData',                              name='in_interpolate',                              datatype='GPBoolean',                              parameterType='Required',                              direction='Input')        p03.value = True        params.append(p03)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import remove_outliers        remove_outliers.execute(parameters)        return    def postExecute(self, parameters):        returnclass ResampleData(object):    def __init__(self):        self.label = 'Resample Data'        self.description = 'Temporally resample a NetCDF.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Input NetCDF',                              name='in_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['nc']        params.append(p00)        p01 = arcpy.Parameter(displayName='Output NetCDF',                              name='out_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Output')        p01.filter.list = ['nc']        params.append(p01)        p02 = arcpy.Parameter(displayName='New Temporal Frequency',                              name='in_frequency',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p02.filter.type = 'ValueList'        p02.filter.list = get_param_resample_frequencies()        p02.value = 'Monthly (Start)'        params.append(p02)        p03 = arcpy.Parameter(displayName='Aggregation Method',                              name='in_aggregator',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p03.filter.type = 'ValueList'        p03.filter.list = get_param_resample_aggregators()        p03.value = 'Mean'        params.append(p03)        p04 = arcpy.Parameter(displayName='Interpolate NoData',                              name='in_interpolate',                              datatype='GPBoolean',                              parameterType='Required',                              direction='Input')        p04.value = True        params.append(p04)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import resample_data        resample_data.execute(parameters)        return    def postExecute(self, parameters):        returnclass GroupData(object):    def __init__(self):        self.label = 'Group Data'        self.description = 'Temporally group a NetCDF.'        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Input NetCDF',                              name='in_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['nc']        params.append(p00)        p01 = arcpy.Parameter(displayName='Output NetCDF',                              name='out_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Output')        p01.filter.list = ['nc']        params.append(p01)        p02 = arcpy.Parameter(displayName='New Temporal Group',                              name='in_group',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p02.filter.type = 'ValueList'        p02.filter.list = get_param_group_groups()        p02.value = 'Month'        params.append(p02)        p03 = arcpy.Parameter(displayName='Aggregation Method',                              name='in_aggregator',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p03.filter.type = 'ValueList'        p03.filter.list = get_param_group_aggregators()        p03.value = 'Mean'        params.append(p03)        p04 = arcpy.Parameter(displayName='Interpolate NoData',                              name='in_interpolate',                              datatype='GPBoolean',                              parameterType='Required',                              direction='Input')        p04.value = True        params.append(p04)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import group_data        group_data.execute(parameters)        return    def postExecute(self, parameters):        returnclass ConvertNetCDFToRasters(object):    def __init__(self):        self.label = 'Convert NetCDF to Rasters'        self.description = ''        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Input NetCDF',                              name='in_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['nc']        params.append(p00)        p01 = arcpy.Parameter(displayName='Output Folder',                              name='out_nc',                              datatype='DEFolder',                              parameterType='Required',                              direction='Input')        #p01.filter.list = ['nc']        params.append(p01)#         p02 = arcpy.Parameter(displayName='New Time-Series Frequency',#                               name='in_frequency',#                               datatype='GPString',#                               parameterType='Required',#                               direction='Input')#         p02.filter.type = 'ValueList'#         p02.filter.list = get_param_resample_frequencies()#         p02.value = 'Monthly Ends'#         params.append(p02)##         p04 = arcpy.Parameter(displayName='Interpolate NoData',#                               name='in_interpolate',#                               datatype='GPBoolean',#                               parameterType='Required',#                               direction='Input')#         p04.value = True#         params.append(p04)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import convert_nc_to_rasters        convert_nc_to_rasters.execute(parameters)        return    def postExecute(self, parameters):        returnclass ConvertNetCDFToCloudRaster(object):    def __init__(self):        self.label = 'Convert NetCDF to Cloud Raster'        self.description = ''        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Input NetCDF',                              name='in_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['nc']        params.append(p00)        p01 = arcpy.Parameter(displayName='Output Cloud Raster',                              name='out_crf',                              datatype='DEFile',                              parameterType='Required',                              direction='Output')        p01.filter.list = ['crf']        params.append(p01)#         p02 = arcpy.Parameter(displayName='New Time-Series Frequency',#                               name='in_frequency',#                               datatype='GPString',#                               parameterType='Required',#                               direction='Input')#         p02.filter.type = 'ValueList'#         p02.filter.list = get_param_resample_frequencies()#         p02.value = 'Monthly Ends'#         params.append(p02)##         p04 = arcpy.Parameter(displayName='Interpolate NoData',#                               name='in_interpolate',#                               datatype='GPBoolean',#                               parameterType='Required',#                               direction='Input')#         p04.value = True#         params.append(p04)        return params    def isLicensed(self):        return True    def updateParameters(self, parameters):        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import convert_nc_to_crf        convert_nc_to_crf.execute(parameters)        return    def postExecute(self, parameters):        returndef get_param_baseline_landsat_collection_list():    collections = [        'Landsat 5 TM',        'Landsat 7 ETM+',        'Landsat 8 OLI',        'Landsat 9 OLI-2'        ]    return collectionsdef get_param_baseline_sentinel2_collection_list():    collections = [        'Sentinel 2A',        'Sentinel 2B'        ]    return collectionsdef get_param_baseline_landsat_asset_band_list():    assets = [        'Blue',        'Green',        'Red',        'NIR',        'SWIR 1',        'SWIR 2'        ]    return assetsdef get_param_baseline_sentinel2_asset_band_list():    assets = [        'Blue',        'Green',        'Red',        'Red Edge 1',        'Red Edge 2',        'Red Edge 3',        'NIR 1',        'NIR 2',        'SWIR 2',        'SWIR 3'        ]    return assetsdef get_param_geomed_landsat_collection_list():    collections = [        'Landsat 5 TM',        'Landsat 7 ETM+',        'Landsat 8 OLI'        ]    return collectionsdef get_param_geomed_landsat_asset_band_list():    assets = [        'Blue',        'Green',        'Red',        'NIR',        'SWIR 1',        'SWIR 2',        'EMAD',        'SMAD',        'BCMAD'        ]    return assetsdef get_param_landsat_srs_list():    srs = [        'GDA94 Australia Albers (EPSG: 3577)',        'WGS84 Pseudo-Mercator (EPSG: 3857)',        'WGS84 (EPSG: 4326)'    ]    return srsdef get_param_sentinel2_srs_list():    srs = [        'GDA94 Australia Albers (EPSG: 3577)',        'WGS84 Pseudo-Mercator (EPSG: 3857)',        'WGS84 (EPSG: 4326)'    ]    return srsdef get_param_fmask_quality_flags():    flags = [        'Valid',        'Cloud',        'Shadow',        'Snow',        'Water'        ]    return flagsdef get_param_cloudless_quality_flags():    flags = [        'Valid',        'Cloud',        'Shadow',        'Snow',        'Water'        ]    return flagsdef get_param_indices_types():    types = [        'Vegetation',        'Water',        'Fire',        'Urban',        'Minerals'        ]    return typesdef get_param_indices_vegetation():    indices = [        'NDVI: Normalised Difference Vegetation Index',        'EVI: Enhanced Vegetation Index',        'LAI: Leaf Area Index',        'MAVI: Moisture Adjusted Vegetation Index',        # savi        'MSAVI: Mod. Soil Adjusted Vegetation Index',        'NDCI: Normalised Difference Chlorophyll Index',        'kNDVI: Non-linear Difference Vegetation Index'        ]    return indicesdef get_param_indices_water():    indices = [        'NDMI: Normalised Difference Moisture Index',        'NDWI: Normalised Difference Water Index',        'MNDWI: Mod. Normalised Difference Water Index',        'WI: Water Index'        ]    return indicesdef get_param_indices_fire():    indices = [        'BAI: Burn Area Index',        'NBR: Normalised Burn Ratio'        ]    return indicesdef get_param_indices_urban():    indices = [        'NDBI: Normalised Difference Built-Up Index',        'BUI: Built-Up Index',        'BAEI: Built-Up Area Extraction Index',        'NBI: New Built-Up Index',        'BSI: Bare Soil Index'        ]    return indicesdef get_param_indices_minerals():    indices = [        'CMR: Clay Minerals Ratio',        'FMR: Ferrous Minerals Ratio',        'IOR: Iron Ore Ratio'        ]    return indicesdef get_param_resample_frequencies():    frequencies = [        'Daily',        'Weekly',        'Monthly (Start)',        'Monthly (End)',        'Semi-Monthly (Start)',        'Semi-Monthly (End)',        'Quarterly (Start)',        'Quarterly (End)',        'Yearly (Start)',        'Yearly (End)'        ]    return frequenciesdef get_param_resample_aggregators():    aggregators = [        'Minimum',        'Maximum',        'Mean',        'Median',        'Sum',        'Standard Deviation'        ]    return aggregatorsdef get_param_group_groups():    groups = [        #'Day',        #'Day of Week',        #'Day of Year',        #'Week',        #'Week of Year',        'Month',        'Quarter',        'Season',        'Year'        ]    return groupsdef get_param_group_aggregators():    aggregators = [        'Minimum',        'Maximum',        'Mean',        'Median',        'Sum',        'Standard Deviation'        ]    return aggregators