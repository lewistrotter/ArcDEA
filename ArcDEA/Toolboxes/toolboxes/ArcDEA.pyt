# -*- coding: utf-8 -*-import osimport datetimeimport jsonimport requestsimport numpy as npimport xarray as xrimport arcpyclass Toolbox(object):    def __init__(self):        self.label = "ArcDEA"        self.alias = "ArcDEA"        self.tools = [DownloadBaselineData]class DownloadBaselineData(object):    def __init__(self):        self.label = 'Download Baseline Data'        self.description = ''        self.canRunInBackground = False    def getParameterInfo(self):        params = []        p00 = arcpy.Parameter(displayName='Input Extent',                              name='in_extent',                              datatype='GPFeatureLayer',                              parameterType='Required',                              direction='Input')        p00.filter.list = ['Polygon']        params.append(p00)                                     p01 = arcpy.Parameter(displayName='Dataset',                              name='in_dataset',                              datatype='GPString',                              parameterType='Required',                              direction='Input')        p01.filter.type = 'ValueList'        p01.filter.list = ['Landsat', 'Sentinel']        p01.value = 'Landsat'        params.append(p01)                p02 = arcpy.Parameter(displayName='Start Date',                              name='in_start_date',                              datatype='GPDate',                              parameterType='Required',                              direction='Input')        p02.value = '2013-01-01'        params.append(p02)                p03 = arcpy.Parameter(displayName='End Date',                              name='in_end_date',                              datatype='GPDate',                              parameterType='Required',                              direction='Input')        p03.value = datetime.date.today().strftime('%Y-%m-%d')        params.append(p03)                p04 = arcpy.Parameter(displayName='Collections',                              name='in_collections',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True,                              category='Collections and Assets')        p04.filter.type = 'ValueList'        p04.filter.list = get_param_collection_list('Landsat')        p04.value = get_param_collection_list('Landsat')        params.append(p04)                p05 = arcpy.Parameter(displayName='Asset Type',                              name='in_asset_type',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              category='Collections and Assets')        p05.filter.type = 'ValueList'        p05.filter.list = ['Bands', 'Indices', 'Calculator']        p05.value = 'Bands'        params.append(p05)        p06 = arcpy.Parameter(displayName='Band Assets',                              name='in_band_assets',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True,                              category='Collections and Assets')        p06.filter.type = 'ValueList'        p06.filter.list = get_param_asset_band_list('Landsat')        p06.value = get_param_asset_band_list('Landsat')        params.append(p06)        p07 = arcpy.Parameter(displayName='Index Assets',                              name='in_index_assets',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=False,                              category='Collections and Assets')        p07.filter.type = 'ValueList'        p07.filter.list = get_param_asset_index_list('Landsat')        p07.value = 'NDVI'        params.append(p07)                p08 = arcpy.Parameter(displayName='Include SLC-off Data',                              name='in_include_slc_off_data',                              datatype='GPBoolean',                              parameterType='Required',                              direction='Input',                              category='Collections and Assets')        p08.value = False        params.append(p08)                p09 = arcpy.Parameter(displayName='Quality Mask Flags',                              name='in_quality_flags',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              multiValue=True,                              category='Quality')        p09.filter.type = 'ValueList'        p09.filter.list = get_param_quality_flags()        p09.value = ['Valid', 'Snow', 'Shadow', 'Water']        params.append(p09)        p10 = arcpy.Parameter(displayName='Maximum Percent Out of Bounds',                              name='in_max_out_of_bounds',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Quality')        p10.filter.type = 'Range'        p10.filter.list = [0, 100]        p10.value = 10        params.append(p10)                p11 = arcpy.Parameter(displayName='Maximum Percent Invalid Pixels',                              name='in_max_invalid_pixels',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Quality')        p11.filter.type = 'Range'        p11.filter.list = [0, 100]        p11.value = 5        params.append(p11)        p12 = arcpy.Parameter(displayName='NoData Value',                              name='in_nodata_value',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Quality')        p12.value = -999        params.append(p12)        p13 = arcpy.Parameter(displayName='Spatial Reference System',                              name='in_srs',                              datatype='GPSpatialReference',                              parameterType='Required',                              direction='Input',                              category='Resampling')        p13.value = arcpy.SpatialReference(3577)        params.append(p13)                p14 = arcpy.Parameter(displayName='Spatial Resolution',                              name='in_res',                              datatype='GPDouble',                              parameterType='Required',                              direction='Input',                              category='Resampling')        p14.value = 30  # TODO: need to change if sentinel or landsat        params.append(p14)        p15 = arcpy.Parameter(displayName='Output Type',                              name='in_output_type',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              category='Output')        p15.filter.type = 'ValueList'        p15.filter.list = ['Geodatabase', 'NetCDF', 'Folder']        p15.value = 'Geodatabase'        params.append(p15)        p16 = arcpy.Parameter(displayName='Output Geodatabase',                              name='in_gdb',                              datatype='DEFile',                              parameterType='Required',                              direction='Output',                              category='Output')        p16.filter.list = ['gdb']        p16.value = get_param_default_gdb()        params.append(p16)        p17 = arcpy.Parameter(displayName='Output NetCDF',                              name='in_nc',                              datatype='DEFile',                              parameterType='Required',                              direction='Output',                              category='Output')        p17.filter.list = ['nc']        p17.value = get_param_default_nc()        params.append(p17)        p18 = arcpy.Parameter(displayName='Output Folder',                      name='in_folder',                      datatype='DEFolder',                      parameterType='Required',                      direction='Input',                      category='Output')        p18.value = get_param_default_folder()        params.append(p18)        p19 = arcpy.Parameter(displayName='Output Raster Format',                              name='in_file_format',                              datatype='GPString',                              parameterType='Required',                              direction='Input',                              category='Output')        p19.filter.type = 'ValueList'        p19.filter.list = get_param_file_extensions()        p19.value = 'TIFF'        params.append(p19)        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        #if parameters[0].value != None:            #parameters[1].enabled = True            #parameters[1].filter.list = get_dataset_list()        #else:            #parameters[1].enabled = False                    #if parameters[1].value != None:            #parameters[2].enabled = True            #parameters[3].enabled = True                        #parameters[4].enabled = True            #parameters[4].filter.list = get_collection_list(parameters[1].value)                        #parameters[5].enabled = True            #parameters[5].value = "Bands"                      #else:            #parameters[2].enabled = False            #parameters[3].enabled = False            #parameters[4].enabled = False            #parameters[5].enabled = False        if parameters[5].value == 'Bands':            parameters[6].enabled = True            parameters[7].enabled = False        elif parameters[5].value == 'Indices':            parameters[6].enabled = False            parameters[7].enabled = True        elif parameters[5].value == 'Calculator':            parameters[6].enabled = False            parameters[7].enabled = False        if parameters[15].valueAsText == 'Geodatabase':            parameters[16].enabled = True            parameters[17].enabled = False            parameters[18].enabled = False            parameters[19].enabled = False        elif parameters[15].valueAsText == 'NetCDF':            parameters[16].enabled = False            parameters[17].enabled = True            parameters[18].enabled = False            parameters[19].enabled = False        elif parameters[15].valueAsText == 'Folder':            parameters[16].enabled = False            parameters[17].enabled = False            parameters[18].enabled = True            parameters[19].enabled = True        return    def updateMessages(self, parameters):        return    def execute(self, parameters, messages):        from geoprocessors import downloadbaselinedata        downloadbaselinedata.execute(parameters)        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        returndef get_param_dataset_list():    datasets = [        "Landsat",        "Sentinel"    ]        return datasetsdef get_param_collection_list(collection):    collections = []    if collection == "Landsat":        collections = [            "Landsat 5 TM",   #"(ga_ls5t_ard_3)"),            "Landsat 7 ETM+", #"(ga_ls7e_ard_3)"),            "Landsat 8 OLI",  #"(ga_ls8c_ard_3)"),            "Landsat 9 OLI-2" #"(ga_ls9c_ard_3)")        ]    elif collection == "Sentinel":        collections = [            "Sentinel 2A", #+ "\t" + "(ga_s2am_ard_3)",             "Sentinel 2B"  #+ "\t" + "(ga_s2bm_ard_3)"        ]            return collections    def get_param_asset_band_list(collection):    assets = []    if collection == "Landsat":        assets = [            "Blue",   #+ "\t" + "(nbart_blue)",             "Green",  #+ "\t" + "(nbart_green)",            "Red",    #+ "\t" + "(nbart_red)",            "NIR",    #+ "\t" + "(nbart_nir)",            "SWIR 1", #+ "\t" + "(nbart_swir_1)",            "SWIR 2"  #+ "\t" + "(nbart_swir_2)"        ]    elif collection == "Sentinel":        assets = [            "Blue",       #+ "\t" + "(nbart_blue)",             "Green",      #+ "\t" + "(nbart_green)",            "Red",        #+ "\t" + "(nbart_red)",            "Red Edge 1", #+ "\t" + "(nbart_red_edge_1)",            "Red Edge 2", #+ "\t" + "(nbart_red_edge_2)",            "Red Edge 3", #+ "\t" + "(nbart_red_edge_3)",            "NIR 1",      #+ "\t" + "(nbart_nir_1)",            "NIR 2",      #+ "\t" + "(nbart_nir_2)",            "SWIR 2",     #+ "\t" + "(nbart_swir_2)",            "SWIR 3"      #+ "\t" + "(nbart_swir_3)"        ]            return assetsdef get_param_asset_index_list(collection):    assets = []    if collection == "Landsat":        assets = [            "NDVI",   #+ "\t" + "(nbart_blue)",            "MAVI"        ]    elif collection == "Sentinel":        assets = [            "Not Implemnted"        ]    return assets    def get_param_quality_flags():    flags = [        'Valid',        'Cloud',        'Shadow',        'Snow',        'Water'    ]        return flagsdef get_param_file_extensions():    extensions = [        'TIFF'    ]        return extensions    def get_param_default_gdb():    try:        aprx = arcpy.mp.ArcGISProject('CURRENT')        output_folder = os.path.dirname(aprx.defaultGeodatabase)    except:        output_folder = arcpy.env.scratchFolder    output_gdb = os.path.join(output_folder, 'ArcDEAData.gdb')    return output_gdbdef get_param_default_nc():    try:        aprx = arcpy.mp.ArcGISProject('CURRENT')        output_folder = os.path.dirname(aprx.defaultGeodatabase)    except:        output_folder = arcpy.env.scratchFolder    output_nc = os.path.join(output_folder, 'ArcDEAData.nc')    return output_ncdef get_param_default_folder():    try:        aprx = arcpy.mp.ArcGISProject('CURRENT')        output_folder = os.path.dirname(aprx.defaultGeodatabase)    except:        output_folder = arcpy.env.scratchFolder    return output_folder